#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ —á–µ—Ä–µ–∑ OpenAI Vision API
"""

import logging
import base64
import requests
from openai import OpenAI
from config import OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

def analyze_photo_test(image_path: str) -> dict:
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        logging.info(f"üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ: {image_path}")
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞
        photo_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ –í–ò–¢-1 –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤.

        –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        –°–£–•–û–ô: XX.X
        –í–õ–ê–ñ–ù–´–ô: XX.X

        –ì–¥–µ XX.X - —ç—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.5¬∞C.

        –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—å:
        –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤
        """

        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
        logging.info(f"üì• –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {image_path}")
        with open(image_path, 'rb') as image_file:
            image_data = image_file.read()
        
        logging.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(image_data)} –±–∞–π—Ç")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        logging.info(f"üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, —Ä–∞–∑–º–µ—Ä: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI Vision API
        logging.info("üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenAI Vision API...")
        openai_response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": photo_prompt
                        },
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{image_base64}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=100
        )
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        ai_response = openai_response.choices[0].message.content.strip()
        logging.info(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç OpenAI: {ai_response}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        lines = ai_response.split('\n')
        t_dry = None
        t_wet = None
        
        logging.info(f"üìù –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞, —Å—Ç—Ä–æ–∫: {len(lines)}")
        
        for line in lines:
            line = line.strip()
            logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–æ–∫—É: '{line}'")
            
            if line.startswith('–°–£–•–û–ô:'):
                try:
                    t_dry = float(line.split(':')[1].strip())
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—Ö–æ–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä: {t_dry}¬∞C")
                except (ValueError, IndexError) as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞: {e}")
                    pass
            elif line.startswith('–í–õ–ê–ñ–ù–´–ô:'):
                try:
                    t_wet = float(line.split(':')[1].strip())
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–ª–∞–∂–Ω—ã–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä: {t_wet}¬∞C")
                except (ValueError, IndexError) as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞: {e}")
                    pass
            elif line.startswith('–û–®–ò–ë–ö–ê:'):
                logging.error("‚ùå OpenAI —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
                return {
                    "success": False,
                    "t_dry": None,
                    "t_wet": None,
                    "error": "OpenAI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤",
                    "raw_response": ai_response
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - –°—É—Ö–æ–π: {t_dry}, –í–ª–∞–∂–Ω—ã–π: {t_wet}")
        
        if t_dry is None or t_wet is None:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {ai_response}")
            return {
                "success": False,
                "t_dry": None,
                "t_wet": None,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ OpenAI: {ai_response}",
                "raw_response": ai_response
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        if t_dry < t_wet:
            logging.error(f"‚ùå –õ–æ–≥–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å—É—Ö–æ–π ({t_dry}) < –≤–ª–∞–∂–Ω—ã–π ({t_wet})")
            return {
                "success": False,
                "t_dry": None,
                "t_wet": None,
                "error": "–ü–æ–∫–∞–∑–∞–Ω–∏–µ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞",
                "raw_response": ai_response
            }
        
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –°—É—Ö–æ–π {t_dry}¬∞C, –í–ª–∞–∂–Ω—ã–π {t_wet}¬∞C")
        return {
            "success": True,
            "t_dry": t_dry,
            "t_wet": t_wet,
            "error": None,
            "raw_response": ai_response
        }

    except FileNotFoundError:
        logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return {
            "success": False,
            "t_dry": None,
            "t_wet": None,
            "error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}",
            "raw_response": None
        }
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}")
        return {
            "success": False,
            "t_dry": None,
            "t_wet": None,
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}",
            "raw_response": None
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    image_path = "img.png"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    import os
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª img.png –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    result = analyze_photo_test(image_path)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print("=" * 30)
    
    if result["success"]:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"üå°Ô∏è –°—É—Ö–æ–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä: {result['t_dry']}¬∞C")
        print(f"üíß –í–ª–∞–∂–Ω—ã–π —Ç–µ—Ä–º–æ–º–µ—Ç—Ä: {result['t_wet']}¬∞C")
        print(f"üìè –†–∞–∑–Ω–æ—Å—Ç—å: {result['t_dry'] - result['t_wet']}¬∞C")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
        from psychrometric_calculator import calculate_humidity
        humidity_result = calculate_humidity(result['t_dry'], result['t_wet'])
        
        if humidity_result["success"]:
            print(f"üí® –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: {humidity_result['humidity']}%")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: {humidity_result['error']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        if result.get('raw_response'):
            print(f"ü§ñ –û—Ç–≤–µ—Ç OpenAI: {result['raw_response']}")
    
    print("\nüìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã—à–µ")

if __name__ == "__main__":
    main()
