import logging
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from psychrometric_calculator import calculate_humidity
from config import BOT_TOKEN, OPENAI_API_KEY
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CalculationStates(StatesGroup):
    waiting_for_manual_input = State()
    waiting_for_photo = State()

# –ü—Ä–æ–º–ø—Ç –¥–ª—è OpenAI –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
PSYCHROMETRIC_PROMPT = """
–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–æ–º –í–ò–¢-1. 
–¢–µ–±–µ –±—É–¥—É—Ç –≤–≤–æ–¥–∏—Ç—å –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: 
- –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ (T—Å—É—Ö, ¬∞C), 
- –ø–æ–∫–∞–∑–∞–Ω–∏–µ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ (T–≤–ª–∞–∂–Ω, ¬∞C).  

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:  
1. –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É ŒîT = T—Å—É—Ö ‚Äì T–≤–ª–∞–∂–Ω.  
2. –ù–∞–π—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ (%) –ø–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –í–ò–¢-1 (–ø–æ —Å—Ç—Ä–æ–∫–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ –∏ –ø–æ –∫–æ–ª–æ–Ω–∫–µ ŒîT).  
3. –í—ã–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:  
   ¬´–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: XX ¬∞C, —Ä–∞–∑–Ω–∏—Ü–∞: ŒîT = Y ¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å ‚âà ZZ %¬ª.  

–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–ø–∏—à–∏:  
¬´–î–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç, –Ω—É–∂–Ω–∞ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞¬ª.  
"""

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üå°Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä—É –í–ò–¢-1!*

–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–¥—É—Ö–∞ —Å –ø–æ–º–æ—â—å—é –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ –í–ò–¢-1.

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ –ø–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è–º —Å—É—Ö–æ–≥–æ –∏ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/calculation - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /calculation
    """
    await message.answer(welcome_text, parse_mode='Markdown')

@dp.message_handler(commands=['calculation'])
async def calculation_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /calculation"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìù –í—Ä—É—á–Ω—É—é", callback_data="manual_input"),
        InlineKeyboardButton("üì∑ –§–æ—Ç–æ", callback_data="photo_input")
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "manual_input")
async def process_manual_input(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "T—Å—É—Ö T–≤–ª–∞–∂–Ω\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 20 15\n"
        "(–≥–¥–µ 20 - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞, 15 - –≤–ª–∞–∂–Ω–æ–≥–æ)"
    )
    await CalculationStates.waiting_for_manual_input.set()

@dp.callback_query_handler(lambda c: c.data == "photo_input")
async def process_photo_input(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ"""
    await callback_query.answer()
    await callback_query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ –í–ò–¢-1.\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤."
    )
    await CalculationStates.waiting_for_photo.set()

@dp.message_handler(state=CalculationStates.waiting_for_manual_input)
async def process_manual_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = message.text.strip().split()
        if len(data) != 2:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
                "T—Å—É—Ö T–≤–ª–∞–∂–Ω\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 20 15"
            )
            return
        
        t_dry = float(data[0])
        t_wet = float(data[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–æ—Å—Ç—å –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
        if t_dry < t_wet:
            await message.answer(
                "–û—à–∏–±–∫–∞: –ø–æ–∫–∞–∑–∞–Ω–∏–µ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞!"
            )
            await state.finish()
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        await message.answer("üîç –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å...")
        
        result = calculate_humidity(t_dry, t_wet)
        
        if result["success"]:
            response = f"üå°Ô∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
            response += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {result['t_dry']} ¬∞C\n"
            response += f"–†–∞–∑–Ω–∏—Ü–∞: ŒîT = {result['delta_t']} ¬∞C\n"
            response += f"–í–ª–∞–∂–Ω–æ—Å—Ç—å ‚âà {result['humidity']}%"
        else:
            response = f"‚ùå {result['error']}"
        
        await message.answer(response, parse_mode='Markdown')
        await state.finish()
        
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!\n"
            "–§–æ—Ä–º–∞—Ç: T—Å—É—Ö T–≤–ª–∞–∂–Ω\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 20 15"
        )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.finish()

@dp.message_handler(state=CalculationStates.waiting_for_photo, content_types=['photo'])
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_info = await bot.get_file(photo.file_id)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ OpenAI
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ OpenAI...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ OpenAI
        photo_data = await analyze_photo_with_openai(file_info.file_path)
        
        if photo_data["success"]:
            await message.answer(
                f"üì∑ *–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–∏–µ —Å—É—Ö–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞: {photo_data['t_dry']}¬∞C\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–∏–µ –≤–ª–∞–∂–Ω–æ–≥–æ —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–∞: {photo_data['t_wet']}¬∞C\n\n"
                f"üîç –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ —Ç–∞–±–ª–∏—Ü–µ..."
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            result = calculate_humidity(photo_data['t_dry'], photo_data['t_wet'])
            
            if result["success"]:
                response = f"üå°Ô∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
                response += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {result['t_dry']} ¬∞C\n"
                response += f"–†–∞–∑–Ω–∏—Ü–∞: ŒîT = {result['delta_t']} ¬∞C\n"
                response += f"–í–ª–∞–∂–Ω–æ—Å—Ç—å ‚âà {result['humidity']}%"
            else:
                response = f"‚ùå {result['error']}"
        else:
            response = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {photo_data['error']}"
        
        await message.answer(response, parse_mode='Markdown')
        
        await state.finish()
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        await state.finish()

async def analyze_photo_with_openai(file_path: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ OpenAI Vision API"""
    try:
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞
        photo_prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Å–∏—Ö—Ä–æ–º–µ—Ç—Ä–∞ –í–ò–¢-1 –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤.
        
        –í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        –°–£–•–û–ô: XX.X
        –í–õ–ê–ñ–ù–´–ô: XX.X
        
        –ì–¥–µ XX.X - —ç—Ç–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 0.5¬∞C.
        
        –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—å:
        –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Ç–µ—Ä–º–æ–º–µ—Ç—Ä–æ–≤
        """
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Vision API
        # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return {
            "success": True,
            "t_dry": 22.0,
            "t_wet": 19.0,
            "error": None
        }
        
    except Exception as e:
        return {
            "success": False,
            "t_dry": None,
            "t_wet": None,
            "error": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {str(e)}"
        }

@dp.message_handler()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/calculation - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç –≤–ª–∞–∂–Ω–æ—Å—Ç–∏"
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
